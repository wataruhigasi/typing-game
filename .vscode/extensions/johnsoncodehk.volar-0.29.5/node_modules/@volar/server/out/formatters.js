"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFormatters = void 0;
const prettyhtml = require("@starptech/prettyhtml");
const prettier = require("prettier");
const sass_formatter_1 = require("sass-formatter");
const vscode = require("vscode-languageserver");
const pugBeautify = require('pug-beautify');
function getFormatters(getPrintWidth) {
    return {
        html: (document, options) => html(document, options, getPrintWidth),
        pug,
        css,
        less,
        scss,
        postcss,
        sass,
    };
}
exports.getFormatters = getFormatters;
async function html(document, options, getPrintWidth) {
    const prefixes = '<template>';
    const suffixes = '</template>';
    let newHtml = prettyhtml(prefixes + document.getText() + suffixes, {
        tabWidth: options.tabSize,
        useTabs: !options.insertSpaces,
        printWidth: await getPrintWidth(document.uri),
    }).contents;
    newHtml = newHtml.trim();
    newHtml = newHtml.substring(prefixes.length, newHtml.length - suffixes.length);
    if (newHtml === document.getText())
        return [];
    const htmlEdit = vscode.TextEdit.replace(vscode.Range.create(document.positionAt(0), document.positionAt(document.getText().length)), newHtml);
    return [htmlEdit];
}
function pug(document, options) {
    const pugCode = document.getText();
    if (pugCode.trim() === '') {
        return []; // fix https://github.com/johnsoncodehk/volar/issues/304
    }
    const prefixesLength = pugCode.length - pugCode.trimStart().length;
    const suffixesLength = pugCode.length - pugCode.trimEnd().length;
    const prefixes = pugCode.substr(0, prefixesLength);
    const suffixes = pugCode.substr(pugCode.length - suffixesLength);
    const newPugCode = pugBeautify(pugCode, {
        tab_size: options.tabSize,
        fill_tab: !options.insertSpaces,
    });
    if (newPugCode === document.getText())
        return [];
    const pugEdit = vscode.TextEdit.replace(vscode.Range.create(document.positionAt(0), document.positionAt(pugCode.length)), prefixes + newPugCode.trim() + suffixes);
    return [pugEdit];
}
function css(document, options) {
    return _css(document, options, 'css');
}
function less(document, options) {
    return _css(document, options, 'less');
}
function scss(document, options) {
    return _css(document, options, 'scss');
}
function postcss(document, options) {
    return _css(document, options, 'postcss');
}
function _css(document, options, languageId) {
    const newStyleText = prettier.format(document.getText(), {
        tabWidth: options.tabSize,
        useTabs: !options.insertSpaces,
        parser: languageId,
    });
    if (newStyleText === document.getText())
        return [];
    const cssEdit = vscode.TextEdit.replace(vscode.Range.create(document.positionAt(0), document.positionAt(document.getText().length)), '\n' + newStyleText);
    return [cssEdit];
}
function sass(document, options) {
    const _options = {
        insertSpaces: options.insertSpaces,
    };
    if (options.insertSpaces)
        _options.tabSize = options.tabSize; // move tabSize here to fix sass-formatter judge
    const newStyleText = sass_formatter_1.SassFormatter.Format(document.getText(), _options);
    if (newStyleText === document.getText())
        return [];
    const cssEdit = vscode.TextEdit.replace(vscode.Range.create(document.positionAt(0), document.positionAt(document.getText().length)), '\n' + newStyleText);
    return [cssEdit];
}
//# sourceMappingURL=formatters.js.map