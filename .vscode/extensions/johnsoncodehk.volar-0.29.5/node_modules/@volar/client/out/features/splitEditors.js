"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.userPick = exports.activate = exports.htmlLs = void 0;
const vscode = require("vscode");
const reactivity_1 = require("@vue/reactivity");
const shared = require("@volar/shared");
const html = require("vscode-html-languageservice");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
exports.htmlLs = html.getLanguageService();
function activate(context) {
    const getDocDescriptor = useDocDescriptor();
    context.subscriptions.push(vscode.commands.registerCommand('volar.action.splitEditors', onSplit));
    async function onSplit() {
        const editor = vscode.window.activeTextEditor;
        if (!editor)
            return;
        const doc = editor.document;
        const descriptor = getDocDescriptor(doc.getText());
        const leftBlocks = [
            descriptor.scriptSetup,
            descriptor.script,
            ...descriptor.styles,
        ].filter(shared.notEmpty);
        const rightBlocks = [
            descriptor.template,
            ...descriptor.customBlocks,
        ].filter(shared.notEmpty);
        await foldingBlocks(leftBlocks);
        await vscode.commands.executeCommand('workbench.action.toggleSplitEditorInGroup');
        await foldingBlocks(rightBlocks);
        async function foldingBlocks(blocks) {
            const firstBlock = blocks.sort((a, b) => a.startTagEnd - b.startTagEnd)[0];
            const editor = vscode.window.activeTextEditor;
            if (!editor)
                return;
            editor.selections = blocks.map(block => new vscode.Selection(doc.positionAt(block.startTagEnd), doc.positionAt(block.startTagEnd)));
            await vscode.commands.executeCommand('editor.unfoldAll');
            await vscode.commands.executeCommand('editor.foldLevel1');
            editor.revealRange(new vscode.Range(doc.positionAt(firstBlock.startTagEnd), new vscode.Position(editor.document.lineCount, 0)), vscode.TextEditorRevealType.AtTop);
        }
    }
}
exports.activate = activate;
function useDocDescriptor() {
    const splitDocText = (0, reactivity_1.ref)('');
    const splitDocDescriptor = (0, reactivity_1.computed)(() => shared.parseSfc(splitDocText.value, exports.htmlLs.parseHTMLDocument(vscode_languageserver_textdocument_1.TextDocument.create('', '', 0, splitDocText.value))));
    return getDescriptor;
    function getDescriptor(text) {
        splitDocText.value = text;
        return splitDocDescriptor.value;
    }
}
function userPick(options, placeholder) {
    return new Promise(resolve => {
        const quickPick = vscode.window.createQuickPick();
        quickPick.items = Object.values(options);
        quickPick.placeholder = placeholder;
        quickPick.onDidChangeSelection(selection => {
            if (selection[0]) {
                for (let key in options) {
                    const option = options[key];
                    if (selection[0] === option) {
                        resolve(key);
                        quickPick.hide();
                        break;
                    }
                }
            }
        });
        quickPick.onDidHide(() => {
            quickPick.dispose();
            resolve(undefined);
        });
        quickPick.show();
    });
}
exports.userPick = userPick;
//# sourceMappingURL=splitEditors.js.map