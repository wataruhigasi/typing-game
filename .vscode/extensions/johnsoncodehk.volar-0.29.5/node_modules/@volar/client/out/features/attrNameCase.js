"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const vscode = require("vscode");
const splitEditors_1 = require("./splitEditors");
const vscode_languageclient_1 = require("vscode-languageclient");
const shared = require("@volar/shared");
async function activate(context, languageClient) {
    var _a;
    await languageClient.onReady();
    await languageClient.sendRequest(shared.InitDoneRequest.type);
    const attrCases = shared.createPathMap();
    const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right);
    statusBar.command = 'volar.action.attrNameCase';
    onChangeDocument((_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.document);
    const d_1 = vscode.window.onDidChangeActiveTextEditor(e => {
        onChangeDocument(e === null || e === void 0 ? void 0 : e.document);
    });
    const d_2 = vscode.workspace.onDidCloseTextDocument((doc) => {
        attrCases.uriDelete(doc.uri.toString());
    });
    const d_3 = vscode.commands.registerCommand('volar.action.attrNameCase', async () => {
        var _a;
        const crtDoc = (_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.document;
        if (!crtDoc)
            return;
        const attrCase = attrCases.uriGet(crtDoc.uri.toString());
        const options = {};
        options[4] = { label: (attrCase === 'kebabCase' ? '• ' : '') + 'Prop Using kebab-case' };
        options[5] = { label: (attrCase === 'camelCase' ? '• ' : '') + 'Prop Using camelCase' };
        options[6] = { label: 'Detect Prop name from Content' };
        const select = await (0, splitEditors_1.userPick)(options);
        if (select === undefined)
            return; // cancle
        if (select === '4') {
            attrCases.uriSet(crtDoc.uri.toString(), 'kebabCase');
            updateStatusBarText('kebabCase');
        }
        if (select === '5') {
            attrCases.uriSet(crtDoc.uri.toString(), 'camelCase');
            updateStatusBarText('camelCase');
        }
        if (select === '6') {
            const detects = await languageClient.sendRequest(shared.DetectDocumentNameCasesRequest.type, languageClient.code2ProtocolConverter.asTextDocumentIdentifier(crtDoc));
            if (detects) {
                attrCases.uriSet(crtDoc.uri.toString(), getValidAttrCase(detects.attr));
                updateStatusBarText(getValidAttrCase(detects.attr));
            }
        }
    });
    languageClient.onDidChangeState(e => {
        if (e.newState === vscode_languageclient_1.State.Stopped) {
            d_1.dispose();
            d_2.dispose();
            d_3.dispose();
            statusBar.dispose();
        }
    });
    return (uri) => {
        var _a;
        let attrCase = attrCases.uriGet(uri);
        if (uri.toLowerCase() === ((_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.document.uri.toString().toLowerCase())) {
            updateStatusBarText(attrCase);
        }
        return attrCase !== null && attrCase !== void 0 ? attrCase : 'kebabCase';
    };
    async function onChangeDocument(newDoc) {
        if ((newDoc === null || newDoc === void 0 ? void 0 : newDoc.languageId) === 'vue') {
            let attrCase = attrCases.uriGet(newDoc.uri.toString());
            if (!attrCase) {
                const attrMode = vscode.workspace.getConfiguration('volar').get('completion.preferredAttrNameCase');
                if (attrMode === 'kebab') {
                    attrCase = 'kebabCase';
                }
                else if (attrMode === 'camel') {
                    attrCase = 'camelCase';
                }
                else {
                    const templateCases = await languageClient.sendRequest(shared.DetectDocumentNameCasesRequest.type, languageClient.code2ProtocolConverter.asTextDocumentIdentifier(newDoc));
                    if (templateCases) {
                        attrCase = getValidAttrCase(templateCases.attr);
                        if (templateCases.attr === 'both') {
                            if (attrMode === 'auto-kebab') {
                                attrCase = 'kebabCase';
                            }
                            else if (attrMode === 'auto-camel') {
                                attrCase = 'camelCase';
                            }
                        }
                    }
                }
            }
            if (attrCase) {
                attrCases.uriSet(newDoc.uri.toString(), attrCase !== null && attrCase !== void 0 ? attrCase : 'unsure');
            }
            updateStatusBarText(attrCase);
            statusBar.show();
        }
        else {
            statusBar.hide();
        }
    }
    function getValidAttrCase(attrCase) {
        if (attrCase === 'both' || attrCase === 'unsure') {
            const attrMode = vscode.workspace.getConfiguration('volar').get('completion.preferredAttrNameCase');
            if (attrMode === 'auto-kebab') {
                return 'kebabCase';
            }
            else if (attrMode === 'auto-camel') {
                return 'camelCase';
            }
            return 'kebabCase';
        }
        return attrCase !== null && attrCase !== void 0 ? attrCase : 'kebabCase';
    }
    function updateStatusBarText(attrCase) {
        let text = `Attr: `;
        if (attrCase === 'kebabCase' || attrCase === undefined) {
            text += `kebab-case`;
        }
        else if (attrCase === 'camelCase') {
            text += `camelCase`;
        }
        statusBar.text = text;
    }
}
exports.activate = activate;
//# sourceMappingURL=attrNameCase.js.map