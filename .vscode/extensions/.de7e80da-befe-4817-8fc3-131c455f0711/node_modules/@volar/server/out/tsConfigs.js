"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPreferences = exports.getFormatOptions = void 0;
async function getFormatOptions(configuration, document, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
    let config = await (configuration === null || configuration === void 0 ? void 0 : configuration.getConfiguration({
        section: isTypeScriptDocument(document) ? 'typescript.format' : 'javascript.format',
        scopeUri: document.uri
    }));
    config = config !== null && config !== void 0 ? config : {};
    return {
        tabSize: options === null || options === void 0 ? void 0 : options.tabSize,
        indentSize: options === null || options === void 0 ? void 0 : options.tabSize,
        convertTabsToSpaces: options === null || options === void 0 ? void 0 : options.insertSpaces,
        // We can use \n here since the editor normalizes later on to its line endings.
        newLineCharacter: '\n',
        insertSpaceAfterCommaDelimiter: (_a = config.insertSpaceAfterCommaDelimiter) !== null && _a !== void 0 ? _a : true,
        insertSpaceAfterConstructor: (_b = config.insertSpaceAfterConstructor) !== null && _b !== void 0 ? _b : false,
        insertSpaceAfterSemicolonInForStatements: (_c = config.insertSpaceAfterSemicolonInForStatements) !== null && _c !== void 0 ? _c : true,
        insertSpaceBeforeAndAfterBinaryOperators: (_d = config.insertSpaceBeforeAndAfterBinaryOperators) !== null && _d !== void 0 ? _d : true,
        insertSpaceAfterKeywordsInControlFlowStatements: (_e = config.insertSpaceAfterKeywordsInControlFlowStatements) !== null && _e !== void 0 ? _e : true,
        insertSpaceAfterFunctionKeywordForAnonymousFunctions: (_f = config.insertSpaceAfterFunctionKeywordForAnonymousFunctions) !== null && _f !== void 0 ? _f : true,
        insertSpaceBeforeFunctionParenthesis: (_g = config.insertSpaceBeforeFunctionParenthesis) !== null && _g !== void 0 ? _g : false,
        insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: (_h = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis) !== null && _h !== void 0 ? _h : false,
        insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: (_j = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets) !== null && _j !== void 0 ? _j : false,
        insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: (_k = config.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces) !== null && _k !== void 0 ? _k : true,
        insertSpaceAfterOpeningAndBeforeClosingEmptyBraces: (_l = config.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces) !== null && _l !== void 0 ? _l : true,
        insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: (_m = config.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces) !== null && _m !== void 0 ? _m : false,
        insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: (_o = config.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces) !== null && _o !== void 0 ? _o : false,
        insertSpaceAfterTypeAssertion: (_p = config.insertSpaceAfterTypeAssertion) !== null && _p !== void 0 ? _p : false,
        placeOpenBraceOnNewLineForFunctions: (_q = config.placeOpenBraceOnNewLineForFunctions) !== null && _q !== void 0 ? _q : false,
        placeOpenBraceOnNewLineForControlBlocks: (_r = config.placeOpenBraceOnNewLineForControlBlocks) !== null && _r !== void 0 ? _r : false,
        semicolons: (_s = config.semicolons) !== null && _s !== void 0 ? _s : 'ignore',
    };
}
exports.getFormatOptions = getFormatOptions;
async function getPreferences(configuration, document) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    let [config, preferencesConfig] = (_a = await (configuration === null || configuration === void 0 ? void 0 : configuration.getConfiguration([
        {
            section: isTypeScriptDocument(document) ? 'typescript' : 'javascript',
            scopeUri: document.uri
        },
        {
            section: isTypeScriptDocument(document) ? 'typescript.preferences' : 'javascript.preferences',
            scopeUri: document.uri
        }
    ]))) !== null && _a !== void 0 ? _a : [undefined, undefined];
    config = config !== null && config !== void 0 ? config : {};
    preferencesConfig = preferencesConfig !== null && preferencesConfig !== void 0 ? preferencesConfig : {};
    const preferences = {
        quotePreference: getQuoteStylePreference(preferencesConfig),
        importModuleSpecifierPreference: getImportModuleSpecifierPreference(preferencesConfig),
        importModuleSpecifierEnding: getImportModuleSpecifierEndingPreference(preferencesConfig),
        allowTextChangesInNewFiles: document.uri.startsWith('file://'),
        providePrefixAndSuffixTextForRename: ((_b = preferencesConfig.renameShorthandProperties) !== null && _b !== void 0 ? _b : true) === false ? false : ((_c = preferencesConfig.useAliasesForRenames) !== null && _c !== void 0 ? _c : true),
        // @ts-ignore
        allowRenameOfImportPath: true,
        includeAutomaticOptionalChainCompletions: (_e = (_d = config.suggest) === null || _d === void 0 ? void 0 : _d.includeAutomaticOptionalChainCompletions) !== null && _e !== void 0 ? _e : true,
        provideRefactorNotApplicableReason: true,
        generateReturnInDocTemplate: (_h = (_g = (_f = config.suggest) === null || _f === void 0 ? void 0 : _f.jsdoc) === null || _g === void 0 ? void 0 : _g.generateReturns) !== null && _h !== void 0 ? _h : true,
        includeCompletionsForImportStatements: (_k = (_j = config.suggest) === null || _j === void 0 ? void 0 : _j.includeCompletionsForImportStatements) !== null && _k !== void 0 ? _k : true,
        includeCompletionsWithSnippetText: (_m = (_l = config.suggest) === null || _l === void 0 ? void 0 : _l.includeCompletionsWithSnippetText) !== null && _m !== void 0 ? _m : true,
        allowIncompleteCompletions: true,
        displayPartsForJSDoc: true,
    };
    return preferences;
}
exports.getPreferences = getPreferences;
function getQuoteStylePreference(config) {
    switch (config.quoteStyle) {
        case 'single': return 'single';
        case 'double': return 'double';
        default: return 'auto';
    }
}
function getImportModuleSpecifierPreference(config) {
    switch (config.importModuleSpecifier) {
        case 'project-relative': return 'project-relative';
        case 'relative': return 'relative';
        case 'non-relative': return 'non-relative';
        default: return undefined;
    }
}
function getImportModuleSpecifierEndingPreference(config) {
    switch (config.importModuleSpecifierEnding) {
        case 'minimal': return 'minimal';
        case 'index': return 'index';
        case 'js': return 'js';
        default: return 'auto';
    }
}
function isTypeScriptDocument(doc) {
    return ['typescript', 'typescriptreact'].includes(doc.languageId);
}
//# sourceMappingURL=tsConfigs.js.map