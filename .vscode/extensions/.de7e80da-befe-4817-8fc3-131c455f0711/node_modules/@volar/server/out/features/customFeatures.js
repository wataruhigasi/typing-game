"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = void 0;
const shared = require("@volar/shared");
const fs = require("fs");
const path = require("upath");
const vscode = require("vscode-languageserver");
function register(connection, documents, getProjects) {
    connection.onRequest(shared.GetRefCompleteEditsRequest.type, async (handler) => {
        const document = documents.get(handler.textDocument.uri);
        if (!document)
            return;
        const languageService = await getLanguageService(document.uri);
        return languageService === null || languageService === void 0 ? void 0 : languageService.__internal__.doRefAutoClose(document, handler.position);
    });
    connection.onRequest(shared.D3Request.type, async (handler) => {
        const document = documents.get(handler.uri);
        if (!document)
            return;
        const languageService = await getLanguageService(document.uri);
        return languageService === null || languageService === void 0 ? void 0 : languageService.__internal__.getD3(document);
    });
    connection.onRequest(shared.GetMatchTsConfigRequest.type, async (handler) => {
        var _a;
        const projects = getProjects();
        return (_a = (await (projects === null || projects === void 0 ? void 0 : projects.getProject(handler.uri)))) === null || _a === void 0 ? void 0 : _a.tsconfig;
    });
    connection.onNotification(shared.WriteVirtualFilesNotification.type, async ({ lsType }) => {
        const projects = getProjects();
        if (!projects)
            return;
        for (const workspace of projects.workspaces.values()) {
            for (const project of workspace.projects.values()) {
                const ls = await (await project).getLanguageServiceDontCreate();
                if (!ls)
                    continue;
                const localTypes = ls.__internal__.getLocalTypesFiles(lsType);
                for (const fileName of localTypes.fileNames) {
                    fs.writeFile(fileName, localTypes.code, () => { });
                }
                const { sourceFiles } = await ls.__internal__.getContext();
                for (const [_, doc] of sourceFiles.getTsDocuments(lsType)) {
                    fs.writeFile(shared.uriToFsPath(doc.uri), doc.getText(), () => { });
                }
            }
        }
    });
    connection.onNotification(shared.VerifyAllScriptsNotification.type, async () => {
        const projects = getProjects();
        if (!projects)
            return;
        let errors = 0;
        let warnings = 0;
        const progress = await connection.window.createWorkDoneProgress();
        progress.begin('Verify', 0, '', true);
        for (const workspace of projects.workspaces.values()) {
            for (const project of workspace.projects.values()) {
                const ls = await (await project).getLanguageServiceDontCreate();
                if (!ls)
                    continue;
                const { sourceFiles } = await ls.__internal__.getContext();
                const allFiles = sourceFiles.getAll();
                let i = 0;
                for (const sourceFile of allFiles) {
                    progress.report(i++ / allFiles.length * 100, path.relative(ls.__internal__.rootPath, shared.uriToFsPath(sourceFile.uri)));
                    if (progress.token.isCancellationRequested) {
                        continue;
                    }
                    let _result = [];
                    await ls.doValidation(sourceFile.uri, result => {
                        connection.sendDiagnostics({ uri: sourceFile.uri, diagnostics: result });
                        _result = result;
                    });
                    errors += _result.filter(error => error.severity === vscode.DiagnosticSeverity.Error).length;
                    warnings += _result.filter(error => error.severity === vscode.DiagnosticSeverity.Warning).length;
                }
            }
        }
        progress.done();
        connection.window.showInformationMessage(`Verification complete. Found ${errors} errors and ${warnings} warnings.`);
    });
    connection.onRequest(shared.DetectDocumentNameCasesRequest.type, async (handler) => {
        const languageService = await getLanguageService(handler.uri);
        return languageService === null || languageService === void 0 ? void 0 : languageService.__internal__.detectTagNameCase(handler.uri);
    });
    async function getLanguageService(uri) {
        var _a;
        const projects = await getProjects();
        const project = (_a = (await (projects === null || projects === void 0 ? void 0 : projects.getProject(uri)))) === null || _a === void 0 ? void 0 : _a.project;
        return project === null || project === void 0 ? void 0 : project.getLanguageService();
    }
}
exports.register = register;
//# sourceMappingURL=customFeatures.js.map