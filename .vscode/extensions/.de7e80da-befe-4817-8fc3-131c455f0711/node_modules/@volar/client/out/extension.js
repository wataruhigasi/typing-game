"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.takeOverModeEnabled = exports.deactivate = exports.activate = void 0;
const shared = require("@volar/shared");
const path = require("upath");
const vscode = require("vscode");
const lsp = require("vscode-languageclient/node");
const activeSelection = require("./features/activeSelection");
const attrNameCase = require("./features/attrNameCase");
const callGraph = require("./features/callGraph");
const createWorkspaceSnippets = require("./features/createWorkspaceSnippets");
const documentVersion = require("./features/documentVersion");
const documentContent = require("./features/documentContent");
const documentPrintWidth = require("./features/documentPrintWidth");
const preview = require("./features/preview");
const showReferences = require("./features/showReferences");
const splitEditors = require("./features/splitEditors");
const tagClosing = require("./features/tagClosing");
const tagNameCase = require("./features/tagNameCase");
const tsVersion = require("./features/tsVersion");
const verifyAll = require("./features/verifyAll");
const virtualFiles = require("./features/virtualFiles");
const whitelist = require("./features/whitelist");
const tsconfig = require("./features/tsconfig");
let apiClient;
let docClient;
let htmlClient;
let lowPowerMode = false;
async function activate(context) {
    const stopCheck = vscode.window.onDidChangeActiveTextEditor(tryActivate);
    tryActivate();
    function tryActivate() {
        if (!vscode.window.activeTextEditor) {
            // onWebviewPanel:preview
            doActivate(context);
            stopCheck.dispose();
            return;
        }
        const currentlangId = vscode.window.activeTextEditor.document.languageId;
        if (currentlangId === 'vue') {
            doActivate(context);
            stopCheck.dispose();
        }
        const takeOverMode = takeOverModeEnabled();
        if (takeOverMode && ['javascript', 'typescript', 'javascriptreact', 'typescriptreact'].includes(currentlangId)) {
            doActivate(context);
            stopCheck.dispose();
        }
    }
}
exports.activate = activate;
async function doActivate(context) {
    lowPowerMode = lowPowerModeEnabled();
    if (lowPowerMode) {
        vscode.window
            .showInformationMessage('Low Power Mode Enabled.', 'Disable')
            .then(option => {
            if (option !== undefined) {
                vscode.commands.executeCommand('workbench.action.openSettings', 'volar.lowPowerMode');
            }
        });
    }
    const takeOverMode = takeOverModeEnabled();
    if (takeOverMode) {
        vscode.window
            .showInformationMessage('Take Over Mode enabled.', 'What is Take Over Mode?')
            .then(option => {
            if (option !== undefined) {
                vscode.env.openExternal(vscode.Uri.parse('https://github.com/johnsoncodehk/volar/discussions/471'));
            }
        });
    }
    const languageFeaturesDocumentSelector = takeOverMode ?
        [
            { scheme: 'file', language: 'vue' },
            { scheme: 'file', language: 'javascript' },
            { scheme: 'file', language: 'typescript' },
            { scheme: 'file', language: 'javascriptreact' },
            { scheme: 'file', language: 'typescriptreact' },
            { scheme: 'file', language: 'json' },
        ] : [
        { scheme: 'file', language: 'vue' },
    ];
    const documentFeaturesDocumentSelector = takeOverMode ?
        [
            { language: 'vue' },
            { language: 'javascript' },
            { language: 'typescript' },
            { language: 'javascriptreact' },
            { language: 'typescriptreact' },
        ] : [
        { language: 'vue' },
    ];
    apiClient = createLanguageService(context, 'api', 'volar-api', 'Volar - API', 6009, languageFeaturesDocumentSelector, undefined);
    docClient = !lowPowerMode ? createLanguageService(context, 'doc', 'volar-document', 'Volar - Document', 6010, languageFeaturesDocumentSelector, undefined) : undefined;
    htmlClient = createLanguageService(context, 'html', 'volar-html', 'Volar - HTML', 6011, documentFeaturesDocumentSelector, undefined);
    const clients = [apiClient, docClient, htmlClient].filter(shared.notEmpty);
    registarLowPowerModeChange();
    registarRestartRequest();
    registarClientRequests();
    splitEditors.activate(context);
    preview.activate(context);
    createWorkspaceSnippets.activate(context);
    callGraph.activate(context, apiClient);
    verifyAll.activate(context, docClient !== null && docClient !== void 0 ? docClient : apiClient);
    virtualFiles.activate(context, docClient !== null && docClient !== void 0 ? docClient : apiClient);
    tagClosing.activate(context, htmlClient, apiClient);
    tsVersion.activate(context, [apiClient, docClient].filter(shared.notEmpty));
    tsconfig.activate(context, docClient !== null && docClient !== void 0 ? docClient : apiClient);
    whitelist.activate(context, clients);
    async function registarLowPowerModeChange() {
        vscode.workspace.onDidChangeConfiguration(async () => {
            const nowIsLowPowerMode = lowPowerModeEnabled();
            if (lowPowerMode !== nowIsLowPowerMode) {
                const reload = await vscode.window.showInformationMessage('Please reload VSCode to switch low power mode.', 'Reload Window');
                if (reload === undefined)
                    return; // cancel
                vscode.commands.executeCommand('workbench.action.reloadWindow');
            }
        });
    }
    async function registarRestartRequest() {
        await Promise.all(clients.map(client => client.onReady()));
        context.subscriptions.push(vscode.commands.registerCommand('volar.action.restartServer', async () => {
            await Promise.all(clients.map(client => client.stop()));
            await Promise.all(clients.map(client => client.start()));
            registarClientRequests();
        }));
    }
    function registarClientRequests() {
        for (const client of clients) {
            showReferences.activate(context, client);
            documentVersion.activate(context, client);
            documentContent.activate(context, client);
            documentPrintWidth.activate(context, client);
            activeSelection.activate(context, client);
        }
        (async () => {
            const getTagNameCase = await tagNameCase.activate(context, apiClient);
            const getAttrNameCase = await attrNameCase.activate(context, apiClient);
            apiClient.onRequest(shared.GetDocumentNameCasesRequest.type, async (handler) => ({
                tagNameCase: getTagNameCase(handler.uri),
                attrNameCase: getAttrNameCase(handler.uri),
            }));
        })();
    }
}
function deactivate() {
    return Promise.all([
        apiClient === null || apiClient === void 0 ? void 0 : apiClient.stop(),
        docClient === null || docClient === void 0 ? void 0 : docClient.stop(),
        htmlClient === null || htmlClient === void 0 ? void 0 : htmlClient.stop(),
    ].filter(shared.notEmpty));
}
exports.deactivate = deactivate;
function takeOverModeEnabled() {
    const status = vscode.workspace.getConfiguration('volar').get('takeOverMode.enabled');
    if (status === 'auto') {
        return !vscode.extensions.getExtension('vscode.typescript-language-features');
    }
    return status;
}
exports.takeOverModeEnabled = takeOverModeEnabled;
function lowPowerModeEnabled() {
    return !!vscode.workspace.getConfiguration('volar').get('lowPowerMode');
}
function createLanguageService(context, mode, id, name, port, documentSelector, initMessage) {
    const serverModule = context.asAbsolutePath(path.join('node_modules', '@volar', 'server', 'out', 'index.js'));
    const debugOptions = { execArgv: ['--nolazy', '--inspect=' + port] };
    const serverOptions = {
        run: { module: serverModule, transport: lsp.TransportKind.ipc },
        debug: {
            module: serverModule,
            transport: lsp.TransportKind.ipc,
            options: debugOptions
        },
    };
    const initializationOptions = {
        typescript: tsVersion.getCurrentTsPaths(context),
        languageFeatures: (mode === 'api' || mode === 'doc') ? {
            ...(mode === 'api' ? {
                references: true,
                definition: true,
                typeDefinition: true,
                callHierarchy: true,
                hover: true,
                rename: true,
                renameFileRefactoring: true,
                signatureHelp: true,
                codeAction: true,
                workspaceSymbol: true,
                completion: {
                    defaultTagNameCase: 'both',
                    defaultAttrNameCase: 'kebabCase',
                    getDocumentNameCasesRequest: true,
                    getDocumentSelectionRequest: true,
                },
                schemaRequestService: { getDocumentContentRequest: true },
            } : {}),
            ...((mode === 'doc' || (mode === 'api' && lowPowerMode)) ? {
                documentHighlight: true,
                documentLink: true,
                codeLens: { showReferencesNotification: true },
                semanticTokens: true,
                diagnostics: { getDocumentVersionRequest: true },
                schemaRequestService: { getDocumentContentRequest: true },
            } : {}),
        } : undefined,
        documentFeatures: mode === 'html' ? {
            selectionRange: true,
            foldingRange: true,
            linkedEditingRange: true,
            documentSymbol: true,
            documentColor: true,
            documentFormatting: {
                defaultPrintWidth: 100,
                getDocumentPrintWidthRequest: true,
            },
        } : undefined,
        initializationMessage: initMessage,
    };
    const clientOptions = {
        documentSelector,
        initializationOptions,
        synchronize: {
            fileEvents: vscode.workspace.createFileSystemWatcher('{**/*.vue,**/*.js,**/*.jsx,**/*.ts,**/*.tsx,**/*.json}')
        }
    };
    const client = new lsp.LanguageClient(id, name, serverOptions, clientOptions);
    context.subscriptions.push(client.start());
    return client;
}
//# sourceMappingURL=extension.js.map