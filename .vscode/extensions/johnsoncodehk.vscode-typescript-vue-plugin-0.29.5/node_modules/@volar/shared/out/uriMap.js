"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPathMap = void 0;
const vscode_uri_1 = require("vscode-uri");
const path_1 = require("./path");
function createPathMap(map = new Map()) {
    return {
        clear,
        values,
        uriDelete,
        uriGet,
        uriHas,
        uriSet,
        fsPathDelete,
        fsPathGet,
        fsPathHas,
        fsPathSet,
    };
    function clear() {
        return map.clear();
    }
    function values() {
        return map.values();
    }
    function uriDelete(_uri) {
        return map.delete(normalizeUri(_uri).toLowerCase());
    }
    function uriGet(_uri) {
        return map.get(normalizeUri(_uri).toLowerCase());
    }
    function uriHas(_uri) {
        return map.has(normalizeUri(_uri).toLowerCase());
    }
    function uriSet(_uri, item) {
        return map.set(normalizeUri(_uri).toLowerCase(), item);
    }
    function fsPathDelete(_fsPath) {
        return map.delete((0, path_1.fsPathToUri)(_fsPath).toLowerCase());
    }
    function fsPathGet(_fsPath) {
        return map.get((0, path_1.fsPathToUri)(_fsPath).toLowerCase());
    }
    function fsPathHas(_fsPath) {
        return map.has((0, path_1.fsPathToUri)(_fsPath).toLowerCase());
    }
    function fsPathSet(_fsPath, item) {
        return map.set((0, path_1.fsPathToUri)(_fsPath).toLowerCase(), item);
    }
}
exports.createPathMap = createPathMap;
function normalizeUri(uri) {
    try {
        return vscode_uri_1.URI.parse(uri).toString();
    }
    catch {
        return '';
    }
}
//# sourceMappingURL=uriMap.js.map